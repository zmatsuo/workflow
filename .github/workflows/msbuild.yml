name: Build installer

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-2022
    env:
      NOPAUSE: 1
      ORGANIZATION_ID: 78e41f48-55fc-4f33-8ea5-08ac32f65ac8
      PROJECT_SLUG: teraterm
      SIGNING_POLICY_SLUG: test-signing
      SIGNPATH_API_TOKEN: ${{ secrets.SIGNPATH_API_TOKEN }}

    steps:
    - uses: actions/checkout@v4

    - name: read buildinfo.json
      id: read_buildinfo
      shell: bash
      run: |
        json_content=$(cat buildinfo.json | jq -c .)
        echo "json=$json_content" >> $GITHUB_OUTPUT

    - name: set vars
      id: vars
      shell: bash
      run: |
        VERSION=${{ fromJson(steps.read_buildinfo.outputs.json).VERSION }}
        DATE_TIME=${{ fromJson(steps.read_buildinfo.outputs.json).DATE }}-${{ fromJson(steps.read_buildinfo.outputs.json).TIME }}
        VCSVERSION=${{ fromJson(steps.read_buildinfo.outputs.json).GITVERSION }}
        SNAPSHOT_OUTPUT=teraterm-${VERSION}-${DATE_TIME}-${VCSVERSION}-snapshot
        RELEASE_OUTPUT=teraterm-${VERSION}
        RELEASE=${{ fromJson(steps.read_buildinfo.outputs.json).RELEASE }}
        if [ "$RELEASE" = "0" ]; then
          OUTPUT=${SNAPSHOT_OUTPUT}
        else
          OUTPUT=${RELEASE_OUTPUT}
        fi
        OUTPUT_ZIP=${OUTPUT}_ZIP
        OUTPUT_EXE=${OUTPUT}_EXE
        echo "SNAPSHOT_OUTPUT=${SNAPSHOT_OUTPUT}" >> $GITHUB_OUTPUT
        echo "RELEASE_OUTPUT=${RELEASE_OUTPUT}" >> $GITHUB_OUTPUT
        echo "RELEASE=${RELEASE}" >> $GITHUB_OUTPUT
        echo "OUTPUT=${OUTPUT}" >> $GITHUB_OUTPUT
        echo "OUTPUT_ZIP=${OUTPUT_ZIP}" >> $GITHUB_OUTPUT
        echo "OUTPUT_EXE=${OUTPUT_EXE}" >> $GITHUB_OUTPUT
        echo "SNAPSHOT_OUTPUT=${SNAPSHOT_OUTPUT}"
        echo "RELEASE_OUTPUT=${RELEASE_OUTPUT}"
        echo "RELEASE=${RELEASE}"
        echo "OUTPUT=${OUTPUT}"
        echo "OUTPUT_ZIP=${OUTPUT_ZIP}"
        echo "OUTPUT_EXE=${OUTPUT_EXE}"

    - name: echo
      shell: bash
      run: |
        OUTPUT="${{ steps.vars.outputs.OUTPUT }}"
        echo mv installer/Output/portable_signed/teraterm "installer/Output/portable_signed/${OUTPUT}"
        echo ${{ steps.vars.outputs.OUTPUT }}
